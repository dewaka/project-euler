-- https://projecteuler.net/problem=2

-- Each new term in the Fibonacci sequence is generated by adding the previous
-- two terms. By starting with 1 and 2, the first 10 terms will be:
-- 
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values do not
-- exceed four million, find the sum of the even-valued terms.

module Problem2 (
  solutionSlow,
  solutionFast,
  fibs,
  fib,
  fibEvens
) where

import Test.HUnit

fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

fib = go 0 1
  where
    go a b n
      | n == 0    = a
      | otherwise = go b (a+b) (n-1)

limit = 4000000

solutionSlow = sum $ filter even $ takeWhile (<= limit) fibs

-- Generates only even numbered Fibonacci numbers by the relation where
-- F(n) = 4*F(n-3) + F(n-6), for even numbered n
fibEvens = 0 : 2 : zipWith next fibEvens (tail fibEvens)
  where
    next fib6 fib3 = 4*fib3 + fib6

solutionFast = sum $ takeWhile (<= limit) fibEvens

-- Tests
test1 = TestCase $ assertEqual "slow and fast solutions agree" solutionFast solutionSlow

solutionTests =
  runTestTT $ TestList [ test1 ]

